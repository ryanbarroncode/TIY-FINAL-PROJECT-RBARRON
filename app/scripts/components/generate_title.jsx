var React = require('react');
var Backbone = require('backbone');
var $ = require('jquery');

var Header = require('../layouts/header.jsx').Header;
var Api = require('../models/api.js').Api;
var ApiCollection = require('../models/api.js').ApiCollection;
var User = require('../models/users.js').User;
var UserCollection = require('../models/users.js').UserCollection;

class GenerateTitleContainer extends React.Component {
  constructor(props){
    super(props);
  }

  render(){
    return(
      <div className="wrapper">
        <Header />
        <MarketingSectionContainer  />
      </div>
    )
  }
}

class MarketingSectionContainer extends React.Component {
  constructor(props){
    super(props);

    var self = this;
    var collection = new ApiCollection();

    collection.parseGenres().fetch().done(function(response){
      self.setState({ genres: response[Object.keys(response)[0]] });
    });

    var localUser = JSON.parse(localStorage.getItem('user'));
    var user = new User();
    user.set('objectId', localUser.objectId);
    user.fetch().then( (data) => {
      this.setState({ user: user });
      console.log('dis user', this.state.user);
    })

    this.state = {
      genres: [],
      movie: null,
      collection
    }

    this.generateMovie = this.generateMovie.bind(this);
    this.addMovieToWatchedList = this.addMovieToWatchedList.bind(this);
  }

  generateMovie(e) {
    var self = this;
    var collection = this.state.collection;
    collection.parseGenreSelection(e.target.value).fetch().done(function(response){
      var movies = response.results.filter(function(movie) {
        return movie.adult == false && movie.original_language == 'en';
      });

      var movie = movies[Math.floor(Math.random() * movies.length)];
      self.setState({ movie: movie });
    });
  }

  addMovieToWatchedList() {
    var user = User.current();
    if(user.get('watchedList')) {
      user.get('watchedList').push(this.state.movie);
    } else {
      user.set('watchedList', [this.state.movie])
    };
    user.save();
  }

  handleToAccount() {
    console.log('Aw heck');
    Backbone.history.navigate('account/', {trigger: true});
  }

  render() {
    // lines 91-97
    // you can render the movie based on a ternary
    // i would create a dumb compoent and return it based on a ternary
    // i just threw the ternary below ... quick, but not pretty
    var genres = this.state.genres.map(function(genre, index) {
      return (
        <option key={index} value={genre.id}>{genre.name}</option>
      )
    });

    // setting movie to a model so I can call .get before movie is generated by select option
    var movie = new Api(this.state.movie);
    var movieTitle = movie.get('title');
    return(
      <div className="container">
        <div className="row col-md-12">
          <h2>
            RandoMovies database has 1,000's of titles to shuffle through
          </h2>
        </div>
        <div className="row">
          <div className="jumbotron market col-md-12">

              <select name="select" onChange={this.generateMovie}>
                <option>Select Genre</option>
                { genres }
              </select>
              { this.state.movie ?
                <div className="col-md-12">
                  <h3>{movie.get('title')}</h3>
                  <img src={"http://image.tmdb.org/t/p/w300/" +  movie.get('poster_path') } alt={movie.get('title')}/>
                  <div className="col-xs-6 col-md-3">
                    <a target="_blank" href={'https://www.google.com/search?q=' + movie.get('title') + ' movie stream'} onClick={this.handleToAccount}><button className="btn-success">Watch It!</button></a>
                    <button className="btn-danger">Reject Movie</button>
                    <button className="btn-primary" onClick={this.addMovieToWatchedList}>Add to Watched List</button>
                  </div>
                  <p className="col-xs-12 col-md-6">{movie.get('overview')}</p>
                </div>

                 :
                null
              }
          </div>

        </div>
      </div>
    )
  }
}

module.exports = {
  GenerateTitleContainer
}
